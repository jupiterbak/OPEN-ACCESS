{
  "_args": [
    [
      {
        "raw": "treeify@1.0.1",
        "scope": null,
        "escapedName": "treeify",
        "name": "treeify",
        "rawSpec": "1.0.1",
        "spec": "1.0.1",
        "type": "version"
      },
      "C:\\Users\\Administrator\\Desktop\\FAPS\\DEMONSTRATOR\\Open_Access_OPCUA\\application\\modules\\northbounds\\OPCUAServerStreamer\\node_modules\\node-opcua"
    ]
  ],
  "_from": "treeify@1.0.1",
  "_id": "treeify@1.0.1",
  "_inCache": true,
  "_location": "/treeify",
  "_npmUser": {
    "name": "notatestuser",
    "email": "notatestuser@gmail.com"
  },
  "_npmVersion": "1.2.15",
  "_phantomChildren": {},
  "_requested": {
    "raw": "treeify@1.0.1",
    "scope": null,
    "escapedName": "treeify",
    "name": "treeify",
    "rawSpec": "1.0.1",
    "spec": "1.0.1",
    "type": "version"
  },
  "_requiredBy": [
    "/node-opcua"
  ],
  "_resolved": "https://registry.npmjs.org/treeify/-/treeify-1.0.1.tgz",
  "_shasum": "69b3cd022022a168424e7cfa1ced44c939d3eb2f",
  "_shrinkwrap": null,
  "_spec": "treeify@1.0.1",
  "_where": "C:\\Users\\Administrator\\Desktop\\FAPS\\DEMONSTRATOR\\Open_Access_OPCUA\\application\\modules\\northbounds\\OPCUAServerStreamer\\node_modules\\node-opcua",
  "author": {
    "name": "Luke Plaster",
    "email": "notatestuser@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/notatestuser/treeify/issues"
  },
  "dependencies": {},
  "description": "converts a JS object into a nice and readable tree structure for the console",
  "devDependencies": {
    "vows": "git://github.com/Filirom1/vows.git#expect"
  },
  "directories": {},
  "dist": {
    "shasum": "69b3cd022022a168424e7cfa1ced44c939d3eb2f",
    "tarball": "https://registry.npmjs.org/treeify/-/treeify-1.0.1.tgz"
  },
  "engines": {
    "node": ">=0.6"
  },
  "homepage": "https://github.com/notatestuser/treeify#readme",
  "keywords": [
    "object",
    "tree",
    "print",
    "console",
    "pretty"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://lp.mit-license.org/"
    }
  ],
  "main": "./treeify",
  "maintainers": [
    {
      "name": "notatestuser",
      "email": "notatestuser@gmail.com"
    }
  ],
  "name": "treeify",
  "optionalDependencies": {},
  "readme": "treeify [![Build Status](https://travis-ci.org/notatestuser/node-treeify.png?branch=master)](https://travis-ci.org/notatestuser/node-treeify)\n=======\n\n_treeify_ converts a JS object into a nice, visible depth-indented tree for console printing. The structure\ngenerated is similar to what you get by running the ```tree``` command on Unixy platforms.\n\n```\n{\n    oranges: {\n        'mandarin': {                                          ├─ oranges\n            clementine: null,                                  │  └─ mandarin\n            tangerine: 'so cheap and juicy!'        -=>        │     ├─ clementine\n        }                                                      │     └─ tangerine: so cheap and juicy!\n    },                                                         └─ apples\n    apples: {                                                     ├─ gala\n        'gala': null,                                             └─ pink lady\n        'pink lady': null\n    }\n}\n```\n\nIt also works well with larger nested hierarchies such as file system directory trees.\nIn fact, the ```fs_tree``` example does a pretty good job of imitating ```tree```. Try it out!\n\nSee the other included examples or the test suite for usage scenarios.\n\nGetting it\n----------\n\n### For use with node.js\n\nFirst you'll want to run this command in your project's root folder:\n```\n$ npm install treeify\n```\n\nThen proceed to use it in your project:\n```js\nvar treeify = require('treeify');\nconsole.log(\n   treeify.asTree({\n      apples: 'gala',      //  ├─ apples: gala\n      oranges: 'mandarin'  //  └─ oranges: mandarin\n   }, true)\n);\n```\n\n### For use in a browser\n\nTreeify cooperates with Node, AMD or browser globals to create a module. This means it'll work\nin a browser regardless of whether you have an AMD-compliant module loader or not. If such\na loader isn't found when the script is executed, you may access Treeify at ```window.treeify```.\n\nUsage\n-----\n\nThe methods exposed to you are as follows, in a strange kind of signature notation:\n\n### asLines()\n```js\ntreeify.asLines(obj, showValues (boolean), [hideFunctions (boolean),] lineCallback (function))\n// NOTE: hideFunctions is optional and may be safely omitted - this was done to ensure we don't break uses of the previous form\n```\n### asTree()\n```js\ntreeify.asTree(obj, showValues (boolean), hideFunctions (boolean)): String\n```\n\nRunning the tests\n-----------------\n\nThere's a pretty extensive suite of Vows tests included.\n```\n$ npm test\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/notatestuser/treeify.git"
  },
  "scripts": {
    "test": "./node_modules/vows/bin/vows --spec"
  },
  "version": "1.0.1"
}
